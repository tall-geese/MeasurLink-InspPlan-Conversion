VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ThisWorkbook"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
'*************************************************************
'*************************************************************
'*                  ThisWorkbook
'*
'*************************************************************
'*************************************************************


Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Call Validations.CloseDataValidations

'    On Error Resume Next
'    Workbooks("RoutineMapDataValidations.xlsm").Close SaveChanges:=False
End Sub

Private Sub Workbook_Open()
'    Call Validations.OpenDataValidations
End Sub


Public Function GetFeaturesForImport()
    GetFeaturesForImport = Worksheets("PartLib Table").ExportRoutineMap()
End Function





Public Function IsInColl(col As Collection, val As Range) As Boolean
    For Each subitem In col
        If subitem.Address = val.Address Then
            IsInColl = True
        End If
    Next subitem
End Function

Public Function ColInColl(col As Collection, val As String) As Boolean
    If col.Count = 0 Then Exit Function
    For Each subitem In col
        If subitem = val Then
            ColInColl = True
        End If
    Next subitem
End Function

Public Function StrInColl(col As Collection, val As String) As Boolean
    If col.Count = 0 Then Exit Function
    For Each subitem In col
        If subitem = val Then
            StrInColl = True
        End If
    Next subitem
End Function

Public Function StrLikeCollItem(col As Collection, val As String) As Boolean
    If col.Count = 0 Then Exit Function
    For Each subitem In col
        If (InStr(val, subitem) > 0) Then
            StrLikeCollItem = True
        End If
    Next subitem
End Function


Public Sub SetBorders(target As Range)
    target.Borders(xlEdgeTop).Weight = xlThin
    target.Borders(xlEdgeBottom).Weight = xlThin
    target.Borders(xlEdgeLeft).Weight = xlThin
    target.Borders(xlEdgeRight).Weight = xlThin
End Sub

Public Function GetNumericSuffix(partNum As String) As String
    Dim i As Integer
    i = 0
    Dim endNum As String
    
    While IsNumeric(Mid(partNum, Len(partNum) - i, 1))
        i = i + 1
        endNum = Right(partNum, i)
        If Len(partNum) = i Then GoTo 10
    Wend
10
    GetNumericSuffix = endNum

End Function

Public Function HasNumber(routine As String) As Boolean
    Dim i As Integer
    For i = 1 To Len(routine)
        If IsNumeric(Mid(routine, i, 1)) Then HasNumber = True
    Next i
End Function


'*****************    Build Optimize Inspections Form      *****************
' Called by RibbonCommands.OptimizeInspections
Public Function BuildOptimizeInspectionForm(ByRef charArr() As String, uniqueOps As Collection, ByRef routines() As Variant)

        'Routines we should never include
    Dim skipCollection As Collection
    Set skipCollection = New Collection
    skipCollection.Add ("FA_FIRST")
    skipCollection.Add ("FI_DIM")
    skipCollection.Add ("FA_LASR")
    skipCollection.Add ("IP_ASSY")
    skipCollection.Add ("FA_FIRST_ASSY")
    skipCollection.Add ("FI_VIS")
    skipCollection.Add ("FI_CMM")
    skipCollection.Add ("FI_RAM")
    skipCollection.Add ("FI_SYLVAC")
    skipCollection.Add ("FI_COMPAR")
    
    Load MapRoutinesForm
    
    Dim multipleOperations As Boolean
    If uniqueOps.Count > 1 Then multipleOperations = True
    
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    
    For i = 1 To uniqueOps.Count
        
        Dim ballLabelCap As String
        ballLabelCap = ""
        Dim ballLabelHeight As Integer
        ballLabelHeight = 10  'Default label height, should fit a single row of text
        
        Dim routineLabelCap As String
        routineLabelCap = ""
        Dim routineLabelHeight As Integer
        routineLabelHeight = 10  'Default label height,
        
        Dim lead As String
        
        
        
        For j = 0 To UBound(charArr, 1)
            If j <> 0 Then lead = " "
            If charArr(j, 4) = uniqueOps(i) Or multipleOperations = False Then
                ballLabelCap = ballLabelCap & lead & charArr(j, 0) & ","
            End If
        Next j
        
        lead = ""
        
        For j = 0 To UBound(routines)
            For k = 0 To UBound(routines(j))
                If k <> 0 And routineLabelCap <> "" Then lead = " "
                    Dim routineName As String
                    routineName = routines(j)(k)
                    
                    If StrLikeCollItem(skipCollection, routineName) Then GoTo skipRt
                
                If multipleOperations Then
                    Dim splitRt() As String
                    
                        'Need to select on the Operation Name, but cant actually select here
                    If uniqueOps(i) = "SWISS" Then
                        If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And Not (HasNumber(routineName)) _
                         And InStr(routineName, "MILL") = 0 Then GoTo addRT
                        
                    ElseIf uniqueOps(i) = "MILL" Then
                        If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And Not (HasNumber(routineName)) _
                         And InStr(routineName, "MILL") > 0 Then GoTo addRT
                    
                    ElseIf uniqueOps(i) = "RECEIVE" Then
                        splitRt = Split(routineName, "_")
                        If splitRt(UBound(splitRt)) = "RECISNP" Then GoTo addRT
                    
                    ElseIf InStr(uniqueOps(i), "SWISS") > 0 Then
                        If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And (HasNumber(routineName)) _
                         And InStr(routineName, "MILL") = 0 Then GoTo addRT
                    
                    ElseIf InStr(uniqueOps(i), "MILL") > 0 Then
                        If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And (HasNumber(routineName)) _
                         And InStr(routineName, "MILL") > 0 Then GoTo addRT
                    
                    ElseIf InStr(uniqueOps(i), "RECEIVE") > 0 Then
                        splitRt = Split(routineName, "_")
                        If splitRt(UBound(splitRt)) = Replace(uniqueOps(i), "RECEIVE", "RECINSP") Then GoTo addRT
                    
                    Else
                    
                    End If
                Else  'if there's only one op, then just add everything
addRT:
                    routineLabelCap = routineLabelCap & lead & routines(j)(k) & ","
                End If
skipRt:
            Next k
        Next j
        
        'Remove the commas at the end
        If Mid(routineLabelCap, Len(routineLabelCap), 1) = "," Then
            routineLabelCap = Mid(routineLabelCap, 1, Len(routineLabelCap) - 1)
        End If
        If Mid(ballLabelCap, Len(ballLabelCap), 1) = "," Then
            ballLabelCap = Mid(ballLabelCap, 1, Len(ballLabelCap) - 1)
        End If
        
        ballLabelCap = "Balloons: " & ballLabelCap
        
        'Adjust the height as the characters wrap around
        ballLabelHeight = ballLabelHeight + (10 * (Application.WorksheetFunction.Floor_Math(Len(ballLabelCap) / 60)))
    
        'Create label for the characteristics
        Dim lbl As MSForms.label
        Set lbl = MapRoutinesForm.Controls.Add("Forms.Label.1", "chLbl" & i) 'TODO: This 1 in the label name will need to generated variable
        With lbl
            .Width = 210
            .Left = 18
            If i <> 1 Then
                .Top = MapRoutinesForm.Controls("rtFrm" & (i - 1)).Top + MapRoutinesForm.Controls("rtFrm" & (i - 1)).Height
            Else
                .Top = 78
            End If
            .Height = ballLabelHeight
            .Caption = ballLabelCap
        End With
        
        'Create Frame for the routines
        Dim frm As MSForms.Frame
        Set frm = MapRoutinesForm.Controls.Add("Forms.Frame.1", "rtFrm" & i)
        With frm
            .Width = 210
            .Left = 18
            .Top = lbl.Top + lbl.Height + 3
            .Caption = uniqueOps(i)
            .Height = 25
        End With
        
        'Adjust the height of the label as the chracters wrap around
        routineLabelHeight = routineLabelHeight + (10 * (Application.WorksheetFunction.Floor_Math(Len(routineLabelCap) / 30)))
        
        'Create label for the routines to go inside the frame
        Dim lbl2 As MSForms.label
        Set lbl2 = frm.Controls.Add("Forms.Label.1", "rtLbl" & i)
        With lbl2
            .Width = 200
            .Left = 3
            .Top = 5
            .Height = routineLabelHeight
            .Caption = routineLabelCap
        End With
                'Adjust the frame height to cover the size of our label
        frm.Height = frm.Height + lbl2.Height
        
    
    Next i
    
    
    
        'Bring the button down underneath the fram
    MapRoutinesForm.MapRoutinesBtn.Top = MapRoutinesForm.Controls("rtFrm" & i - 1).Top + MapRoutinesForm.Controls("rtFrm" & i - 1).Height + 5
    MapRoutinesForm.Height = MapRoutinesForm.MapRoutinesBtn.Height + MapRoutinesForm.MapRoutinesBtn.Top + 40
    MapRoutinesForm.Show
    
    If MapRoutinesForm.Tag <> "True" Then Exit Function
    
    Erase routines
    ReDim Preserve routines(1 To (uniqueOps.Count), 0 To 1)
        
    For i = 1 To uniqueOps.Count
        routines(i, 0) = uniqueOps(i)
        Dim rtCaption As String
        rtCaption = MapRoutinesForm.Controls("rtLbl" & i).Caption
        rtCaption = Replace(rtCaption, " ", "")
        If rtCaption = "" Then GoTo skipRts
        routines(i, 1) = Split(rtCaption, ",")
skipRts:
    Next i
    
    Unload MapRoutinesForm
    
    'Set the characteristic and routine information so PartLib will know what to optimize
    

    BuildOptimizeInspectionForm = True
    
End Function




'*****************    Build Routine Form      *****************
'Called by RibbonCommands.DeleteRoutines
'Needs to take and array, A caption for the button, and optional Header with optional spacing ANd should return an array of selected checkboxes
Public Function BuildRoutineForm(routines() As Variant, colors() As Variant, frmHeader As String, btnCaption As String, Optional instructions As Variant, _
                                    Optional instructionsSpacing As Integer) As String()

    On Error GoTo frmErr
    Load DelRoutinesForm
    Dim myFrame As MSForms.Frame
    Dim chkbx As MSForms.CheckBox
    Dim ctl As MSForms.control
    Dim btn As btnClass
    Dim spacing As Integer
    Dim returnArr() As String
    
    DelRoutinesForm.Caption = frmHeader
    
    For i = 0 To UBound(routines)
        'Spacing, account for how many rows each frame will  have
        spacing = spacing + (5 + Application.WorksheetFunction.Ceiling_Math((UBound(routines(i)) + 1) / 3) * 16)
    Next i
    
    Dim padding As Integer
    For i = 0 To UBound(colors)
        'Frames need to be spaced further from the top depending on the order they're in
        padding = padding + (10 * (i + 1))
    Next i
    
    spacing = spacing + padding
    
    'Exponential negative scaling, it just works
    spacing = spacing + ((i * i) * (-4))
    
    'Add the height of the btn
    spacing = spacing + 30
    
    'Additional spacing for the text label, if it is passed in
    spacing = spacing + instructionsSpacing
    
    'Add the difference of (Height  - Inside Height)
    DelRoutinesForm.Height = spacing + 37
    
    
    If Not IsMissing(instructions) Then
        Dim lblCtrl As MSForms.label
        Set lblCtrl = DelRoutinesForm.Controls.Add("Forms.Label.1", "instrLabel")
        With lblCtrl
            .Top = 1
            .Left = 11
            .Width = 366
            .Caption = instructions
            .Height = instructionsSpacing
        End With
    End If
    
    
    
    For i = 0 To UBound(routines)
        'For each group, create a frame to house the routines in
        Set myFrame = DelRoutinesForm.Controls.Add("Forms.Frame.1", "myframe" & (i + 1))
        With myFrame
            .BackColor = colors(i) 'Set the background color to the color we found associated with that routine name
            .Height = 5 + Application.WorksheetFunction.Ceiling_Math((UBound(routines(i)) + 1) / 3) * 16 'Scaling height depending on rows
            .Top = 10 * (i + 1) + instructionsSpacing
            If i > 0 Then
                For k = 1 To i
                    .Top = .Top + DelRoutinesForm.Controls("myframe" & k).Height
                Next k
            End If
            .Left = 11
            .Width = 366
            'For each frame, set the grouped routine names
            For j = 0 To UBound(routines(i))
                Set chkbx = myFrame.Controls.Add("Forms.CheckBox.1", "myBox" & (j + 1))
                With chkbx
                    .Height = 18
                    .Width = 120
                    .Left = 10 + (120 * Application.WorksheetFunction.Floor_Math(j Mod 3))
                    .Caption = routines(i)(j)
                    .Top = 1 + (14 * Application.WorksheetFunction.Floor_Math(j / 3))
                End With
            Next j
        End With
    Next i
    
    Set ctl = DelRoutinesForm.Controls.Add("Forms.CommandButton.1", "myBtn")
    'Set configuration for the btn
    With ctl
        .Height = 30
            'Set it underneath the last frame that we set
        .Top = DelRoutinesForm.Controls("myframe" & i).Top + DelRoutinesForm.Controls("myframe" & i).Height + 2
        .Width = 366
        .Left = 11
        .Caption = "Delete Routines"
        .Font.Bold = True
        .Font.Size = 12
    End With

    'Set as an instance of our custom btn class which has the callback function associated with it
    Set btn = New btnClass
    Set btn.btn = ctl
    Set btn.usrForm = DelRoutinesForm
    btn.btn.Caption = btnCaption
    
    DelRoutinesForm.Show
    
    On Error GoTo delErr
    Dim contr As MSForms.control
    For Each contr In DelRoutinesForm.Controls
        If TypeName(contr) = "CheckBox" Then
            If contr.Value = True Then
                'For each checked off box, add that routine to our list
                If (Not returnArr) = -1 Then
                    ReDim Preserve returnArr(0)
                    returnArr(0) = contr.Caption
                Else
                    ReDim Preserve returnArr(UBound(returnArr) + 1)
                    returnArr(UBound(returnArr)) = contr.Caption
                End If
            End If
        End If
    Next contr
    
    Unload DelRoutinesForm
    
    BuildRoutineForm = returnArr
    
    Exit Function
    
frmErr:
    MsgBox "Error when building form with listing of routines", vbCritical
    Exit Function
    
delErr:
    MsgBox "Couldn't Delete the routine: " & contr.Caption, vbCritical
    Exit Function


End Function


Sub testColl()
    Dim a As Collection
    Set a = New Collection
    a.Add "Hello"
    a.Add "goodbye"
    a.Add "sup"
    
    a.Remove (1)

    Debug.Print (a.Item(1))

End Sub


Sub testSplit()
    Dim readWB As Workbook
    Set readWB = Me
    Dim verCode As String
    With readWB.VBProject.VBComponents("DataSources").CodeModule
'        On Error GoTo verErr
        verCode = Split(Split(.Lines(1, .CountOfDeclarationLines), "Const VERSION = " & Chr(34))(1), Chr(34))(0)
    End With

    Debug.Print (verCode)

End Sub

Sub testWBPath()
    Dim fso As FileSystemObject
    Set fso = New FileSystemObject
    Debug.Print (ThisWorkbook.path)
    Debug.Print (ThisWorkbook.Name)
    Debug.Print (fso.GetFileName(ThisWorkbook.path))
    
    

End Sub

Sub testArr()
    Dim a() As String
    ReDim Preserve a(0 To 0, 0 To 4)
    a(0, 1) = "hey"
    
    ReDim Preserve a(0 To 1, 0 To 5)



'If (Not featureArr) = -1 Then
'                    ReDim Preserve featureArr(0 To 4, 1 To 1)
'                Else
'                    ReDim Preserve featureArr(0 To 4, 1 To UBound(featureArr, 2) + 1)
'                End If

End Sub



'
'Sub events()
'    Application.EnableEvents = True
'End Sub

'Called by PartLib and PivotFeature



