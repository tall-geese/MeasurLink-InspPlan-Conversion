VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ThisWorkbook"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True


'*************************************************************
'*************************************************************
'*                  ThisWorkbook
'*
'*************************************************************
'*************************************************************


Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Call Validations.CloseDataValidations

'    On Error Resume Next
'    Workbooks("RoutineMapDataValidations.xlsm").Close SaveChanges:=False
End Sub

Private Sub Workbook_Open()
'    Call Validations.OpenDataValidations
End Sub


Public Function GetFeaturesForImport()
    GetFeaturesForImport = Worksheets("PartLib Table").ExportRoutineMap()
End Function





Public Function IsInColl(col As Collection, val As Range) As Boolean
    For Each subitem In col
        If subitem.Address = val.Address Then
            IsInColl = True
        End If
    Next subitem
End Function

Public Function ColInColl(col As Collection, val As String) As Boolean
    If col.Count = 0 Then Exit Function
    For Each subitem In col
        If subitem = val Then
            ColInColl = True
        End If
    Next subitem
End Function

Public Function StrInColl(col As Collection, val As String) As Boolean
    If col.Count = 0 Then Exit Function
    For Each subitem In col
        If subitem = val Then
            StrInColl = True
            Exit Function
        End If
    Next subitem
End Function

Public Function StrLikeCollItem(col As Collection, val As String) As Boolean
    If col.Count = 0 Then Exit Function
    For Each subitem In col
        If (InStr(val, subitem) > 0) Then
            StrLikeCollItem = True
            Exit Function
        End If
    Next subitem
End Function

Public Function CollItemLikeStr(col As Collection, val As String) As Boolean
    If col.Count = 0 Then Exit Function
    For Each subitem In col
        If (InStr(subitem, val) > 0) Then
            CollItemLikeStr = True
            Exit Function
        End If
    Next subitem
End Function


Public Sub SetBorders(Target As Range)
    Target.Borders(xlEdgeTop).Weight = xlThin
    Target.Borders(xlEdgeBottom).Weight = xlThin
    Target.Borders(xlEdgeLeft).Weight = xlThin
    Target.Borders(xlEdgeRight).Weight = xlThin
End Sub

Public Function GetNumericSuffix(partNum As String) As String
    Dim i As Integer
    i = 0
    Dim endNum As String
    
    While IsNumeric(Mid(partNum, Len(partNum) - i, 1))
        i = i + 1
        endNum = Right(partNum, i)
        If Len(partNum) = i Then GoTo 10
    Wend
10
    GetNumericSuffix = endNum

End Function

Public Function HasNumber(routine As String) As Boolean
    Dim i As Integer
    For i = 1 To Len(routine)
        If IsNumeric(Mid(routine, i, 1)) Then HasNumber = True
    Next i
End Function


'*****************    Build Optimize Inspections Form      *****************
' Called by RibbonCommands.OptimizeInspections
Public Function BuildOptimizeInspectionForm(ByRef charArr() As String, uniqueOps As Collection, ByRef routines() As Variant, _
                                            skipCollection As Collection, FACollection As Collection, allRts As Collection) As Boolean

    Load MapRoutinesForm
    
    Dim multipleOperations As Boolean
    If uniqueOps.Count > 1 Then multipleOperations = True
    
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    
    For i = 1 To uniqueOps.Count
        
        Dim ballLabelCap As String
        ballLabelCap = ""
        Dim ballLabelHeight As Integer
        ballLabelHeight = 10  'Default label height, should fit a single row of text
        
        Dim routineLabelCap As String
        routineLabelCap = ""
        Dim routineLabelHeight As Integer
        routineLabelHeight = 10  'Default label height,
        
        Dim lead As String
        
        
            'Each characteristic that matches opName add the strings together
        For j = 0 To UBound(charArr, 1)
            If j <> 0 Then lead = " "
            If charArr(j, 4) = uniqueOps(i) Or multipleOperations = False Then
                ballLabelCap = ballLabelCap & lead & charArr(j, 0) & ","
            End If
        Next j
        
        lead = ""
        
            'For each routine
        For j = 0 To UBound(routines)
            For k = 0 To UBound(routines(j))
                If k <> 0 And routineLabelCap <> "" Then lead = " "
                    Dim routineName As String
                    routineName = routines(j)(k)
                    
                        'Ignore if it matches a skip routine
                    If StrLikeCollItem(skipCollection, routineName) Then GoTo skipRT
                    'IF there are multiple operations, add it if it matches that appropriate operation type
                If multipleOperations Then
                    Dim splitRt() As String
                    Dim opName As String
                    Dim opNumber As String
                    
                    opName = uniqueOps(i)
                    If IsNumeric(Right(opName, 1)) Then
                        opNumber = Right(opName, 1)
                        opName = Left(opName, Len(opName) - 1)
                    End If
                    
                    
                        'Need to select on the Operation Name, but cant actually use a SELECT statement here
                    If opName = "ALL" Then
                        If StrLikeCollItem(allRts, routineName) Then GoTo addRT
                        
                    ElseIf opName = "FAIs" Then
                        If StrLikeCollItem(FACollection, routineName) Then GoTo addRT
                                                
                    ElseIf opName = "SWISS" And opNumber = "" Then   'FA_FIRST, IP_1XSHIFT, ....
                        If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And InStr(routineName, "MILL") = 0 Then
                            If Not (InStr(routineName, "FA_FIRST_ASSY") > 0) And Not (InStr(routineName, "IP_ASSY") > 0) And Not (InStr(routineName, "FA_LASR") > 0) Then
                                splitRt = Split(routineName, "_")
                                If Not (IsNumeric(Right(splitRt(1), 1))) Then
                                    GoTo addRT
                                End If
                            End If
                        End If
                        
                    ElseIf opName = "MILL" And opNumber = "" Then   'FA_FIRST_MILL, IP_1XSHIFT_MILL....
                        If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And InStr(routineName, "MILL") > 0 Then
                                splitRt = Split(routineName, "_")
                                If Not (IsNumeric(Right(splitRt(1), 1))) Then
                                    GoTo addRT
                                End If
                        End If
                    
                    ElseIf opName = "RECEIVE" And opNumber = "" Then    'FI_OPXX_RECINSP...
                        splitRt = Split(routineName, "_")
                        If splitRt(UBound(splitRt)) = "RECINSP" Then GoTo addRT
                    
                    ElseIf InStr(opName, "SWISS") > 0 Then  'FA_FIRST2, IP_1XSHIFT2....
                        If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And InStr(routineName, "MILL") = 0 Then
                            If Not (InStr(routineName, "FA_FIRST_ASSY") > 0) And Not (InStr(routineName, "IP_ASSY") > 0) And Not (InStr(routineName, "FA_LASR") > 0) Then
                                splitRt = Split(routineName, "_")
                                If Right(splitRt(1), 1) = opNumber Then
                                    GoTo addRT
                                End If
                            End If
                        End If
                    
                    ElseIf InStr(opName, "MILL") > 0 Then     'FA_FIRST2_MILL, IP_BENCH2_MILL
                        If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And InStr(routineName, "MILL") > 0 Then
                            If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And InStr(routineName, "MILL") > 0 Then
                                splitRt = Split(routineName, "_")
                                If Right(splitRt(1), 1) = opNumber Then
                                    GoTo addRT
                                End If
                            End If
                        End If
                    
                    ElseIf InStr(opName, "RECEIVE") > 0 Then     'FI_OPXX_RECINSP2, FI_OPXX_RECINSP3....
                        splitRt = Split(routineName, "_")
                        If splitRt(UBound(splitRt)) = "RECINSP" & opNumber Then GoTo addRT
                        
                    ElseIf opName = "ASSEM" Then     'FA_FIRST_ASSY, IP_ASSY or FA_LASR
                        If routineName = "FA_FIRST_ASSY" Or routineName = "IP_ASSY" Or routineName = "FA_LASR" Then GoTo addRT
                    Else
                    
                    End If
                Else  'if there's only one op, then just add everything
addRT:
                    routineLabelCap = routineLabelCap & lead & routines(j)(k) & ","
                End If
                
                opName = ""
                opNumber = ""
skipRT:
            Next k
        Next j
        
            'If there are no valid routines for this op, exit function
        If Replace(routineLabelCap, " ", "") = "" Then
            MsgBox uniqueOps(i) & " is listed to one or more characteristics" & vbCrLf _
                & "but there are no applicable routines to assign to it", vbCritical
                
            Exit Function
        End If
        
        'Remove the commas at the end
        If Mid(routineLabelCap, Len(routineLabelCap), 1) = "," Then
            routineLabelCap = Mid(routineLabelCap, 1, Len(routineLabelCap) - 1)
        End If
        If Mid(ballLabelCap, Len(ballLabelCap), 1) = "," Then
            ballLabelCap = Mid(ballLabelCap, 1, Len(ballLabelCap) - 1)
        End If
        
        ballLabelCap = "Balloons: " & ballLabelCap
        
        'Adjust the height as the characters wrap around
        ballLabelHeight = ballLabelHeight + (10 * (Application.WorksheetFunction.Floor_Math(Len(ballLabelCap) / 60)))
        
        'BEGIN CREATING THE FORM CONTROLS...
    
        'Create label for the characteristics
        Dim lbl As MSForms.label
        Set lbl = MapRoutinesForm.Controls.Add("Forms.Label.1", "chLbl" & i) 'TODO: This 1 in the label name will need to generated variable
        With lbl
            .Width = 210
            .Left = 18
            If i <> 1 Then
                .Top = MapRoutinesForm.Controls("rtFrm" & (i - 1)).Top + MapRoutinesForm.Controls("rtFrm" & (i - 1)).Height
            Else
                .Top = 78
            End If
            .Height = ballLabelHeight
            .Caption = ballLabelCap
        End With
        
        'Create Frame for the routines
        Dim frm As MSForms.Frame
        Set frm = MapRoutinesForm.Controls.Add("Forms.Frame.1", "rtFrm" & i)
        With frm
            .Width = 210
            .Left = 18
            .Top = lbl.Top + lbl.Height + 3
            .Caption = uniqueOps(i)
            .Height = 25
        End With
        
        'Adjust the height of the label as the chracters wrap around
        routineLabelHeight = routineLabelHeight + (10 * (Application.WorksheetFunction.Floor_Math(Len(routineLabelCap) / 30)))
        
        'Create label for the routines to go inside the frame
        Dim lbl2 As MSForms.label
        Set lbl2 = frm.Controls.Add("Forms.Label.1", "rtLbl" & i)
        With lbl2
            .Width = 200
            .Left = 3
            .Top = 5
            .Height = routineLabelHeight
            .Caption = routineLabelCap
        End With
                'Adjust the frame height to cover the size of our label
        frm.Height = frm.Height + lbl2.Height
        
    
    Next i
    
    
    
        'Bring the button down underneath the frame
    MapRoutinesForm.MapRoutinesBtn.Top = MapRoutinesForm.Controls("rtFrm" & i - 1).Top + MapRoutinesForm.Controls("rtFrm" & i - 1).Height + 5
    MapRoutinesForm.Height = MapRoutinesForm.MapRoutinesBtn.Height + MapRoutinesForm.MapRoutinesBtn.Top + 40
    MapRoutinesForm.Show
    
    If MapRoutinesForm.Tag <> "True" Then Exit Function
    
    'Create new routines() array with opName first, then the routines applicable to the opName() second
    Erase routines
    ReDim Preserve routines(1 To (uniqueOps.Count), 0 To 1)
        
    For i = 1 To uniqueOps.Count
        routines(i, 0) = uniqueOps(i)
        Dim rtCaption As String
        rtCaption = MapRoutinesForm.Controls("rtLbl" & i).Caption
        rtCaption = Replace(rtCaption, " ", "")
        If rtCaption = "" Then GoTo skipRts
        routines(i, 1) = Split(rtCaption, ",")
skipRts:
    Next i
    
    Unload MapRoutinesForm
    
    'Set the characteristic and routine information so PartLib will know what to optimize
    

    BuildOptimizeInspectionForm = True
    
End Function



'        Old / Deprecated

''*****************    Build Optimize Inspections Form      *****************
'' Called by RibbonCommands.OptimizeInspections
'Public Function BuildOptimizeInspectionForm(ByRef charArr() As String, uniqueOps As Collection, ByRef routines() As Variant) As Boolean
'
'        'Routines we should never include
'    Dim skipCollection As Collection
'    Set skipCollection = New Collection
'    skipCollection.Add ("FA_LASR")
'    skipCollection.Add ("FI_CMM")
'    skipCollection.Add ("FI_RAM")
'    skipCollection.Add ("FI_SYLVAC")
'    skipCollection.Add ("FI_COMPAR")
'
'    Load MapRoutinesForm
'
'    Dim multipleOperations As Boolean
'    If uniqueOps.Count > 1 Then multipleOperations = True
'
'    Dim i As Integer
'    Dim j As Integer
'    Dim k As Integer
'
'    For i = 1 To uniqueOps.Count
'
'        Dim ballLabelCap As String
'        ballLabelCap = ""
'        Dim ballLabelHeight As Integer
'        ballLabelHeight = 10  'Default label height, should fit a single row of text
'
'        Dim routineLabelCap As String
'        routineLabelCap = ""
'        Dim routineLabelHeight As Integer
'        routineLabelHeight = 10  'Default label height,
'
'        Dim lead As String
'
'
'            'Each characteristic that matches opName add the strings together
'        For j = 0 To UBound(charArr, 1)
'            If j <> 0 Then lead = " "
'            If charArr(j, 4) = uniqueOps(i) Or multipleOperations = False Then
'                ballLabelCap = ballLabelCap & lead & charArr(j, 0) & ","
'            End If
'        Next j
'
'        lead = ""
'
'            'For each routine
'        For j = 0 To UBound(routines)
'            For k = 0 To UBound(routines(j))
'                If k <> 0 And routineLabelCap <> "" Then lead = " "
'                    Dim routineName As String
'                    routineName = routines(j)(k)
'
'                        'Ignore if it matches a skip routine
'                    If StrLikeCollItem(skipCollection, routineName) Then GoTo skipRT
'                    'IF there are multiple operations, add it if it matches that appropriate operation type
'                If multipleOperations Then
'                    Dim splitRt() As String
'
'                        'Need to select on the Operation Name, but cant actually select here
'                    If uniqueOps(i) = "SWISS" Then   'FA_FIRST, IP_1XSHIFT, ....
'                        If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And Not (HasNumber(routineName)) _
'                         And InStr(routineName, "MILL") = 0 Then GoTo addRT
'
'                    ElseIf uniqueOps(i) = "MILL" Then   'FA_FIRST_MILL, IP_1XSHIFT_MILL....
'                        If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And Not (HasNumber(routineName)) _
'                         And InStr(routineName, "MILL") > 0 Then GoTo addRT
'
'                    ElseIf uniqueOps(i) = "RECEIVE" Then    'FI_OPXX_RECINSP...
'                        splitRt = Split(routineName, "_")
'                        If splitRt(UBound(splitRt)) = "RECINSP" Then GoTo addRT
'
'                    ElseIf InStr(uniqueOps(i), "SWISS") > 0 Then  'FA_FIRST2, IP_1XSHIFT2....
'                        If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And (HasNumber(routineName)) _
'                         And InStr(routineName, "MILL") = 0 Then GoTo addRT
'
'                    ElseIf InStr(uniqueOps(i), "MILL") > 0 Then     'FA_FIRST2_MILL, IP_BENCH2_MILL
'                        If (InStr(routineName, "FA") > 0 Or InStr(routineName, "IP") > 0) And (HasNumber(routineName)) _
'                         And InStr(routineName, "MILL") > 0 Then GoTo addRT
'
'                    ElseIf InStr(uniqueOps(i), "RECEIVE") > 0 Then     'FI_OPXX_RECINSP2, FI_OPXX_RECINSP3....
'                        splitRt = Split(routineName, "_")
'                        If splitRt(UBound(splitRt)) = Replace(uniqueOps(i), "RECEIVE", "RECINSP") Then GoTo addRT
'
'                    ElseIf uniqueOps(i) = "ASSEM" Then     'FA_FIRST_ASSY, IP_ASSY or FA_LASR
'                        If routineName = "FA_FIRST_ASSY" Or routineName = "IP_ASSY" Or routineName = "FA_LASR" Then GoTo addRT
'                    Else
'
'                    End If
'                Else  'if there's only one op, then just add everything
'addRT:
'                    routineLabelCap = routineLabelCap & lead & routines(j)(k) & ","
'                End If
'skipRT:
'            Next k
'        Next j
'
'            'If there are no valid routines for this op, exit function
'        If Replace(routineLabelCap, " ", "") = "" Then
'            MsgBox uniqueOps(i) & " is listed to one or more characteristics" & vbCrLf _
'                & "but there are no applicable routines to assign to it", vbCritical
'
'            Exit Function
'        End If
'
'        'Remove the commas at the end
'        If Mid(routineLabelCap, Len(routineLabelCap), 1) = "," Then
'            routineLabelCap = Mid(routineLabelCap, 1, Len(routineLabelCap) - 1)
'        End If
'        If Mid(ballLabelCap, Len(ballLabelCap), 1) = "," Then
'            ballLabelCap = Mid(ballLabelCap, 1, Len(ballLabelCap) - 1)
'        End If
'
'        ballLabelCap = "Balloons: " & ballLabelCap
'
'        'Adjust the height as the characters wrap around
'        ballLabelHeight = ballLabelHeight + (10 * (Application.WorksheetFunction.Floor_Math(Len(ballLabelCap) / 60)))
'
'        'BEGIN CREATING THE FORM CONTROLS...
'
'        'Create label for the characteristics
'        Dim lbl As MSForms.Label
'        Set lbl = MapRoutinesForm.Controls.Add("Forms.Label.1", "chLbl" & i) 'TODO: This 1 in the label name will need to generated variable
'        With lbl
'            .Width = 210
'            .Left = 18
'            If i <> 1 Then
'                .Top = MapRoutinesForm.Controls("rtFrm" & (i - 1)).Top + MapRoutinesForm.Controls("rtFrm" & (i - 1)).Height
'            Else
'                .Top = 78
'            End If
'            .Height = ballLabelHeight
'            .Caption = ballLabelCap
'        End With
'
'        'Create Frame for the routines
'        Dim frm As MSForms.Frame
'        Set frm = MapRoutinesForm.Controls.Add("Forms.Frame.1", "rtFrm" & i)
'        With frm
'            .Width = 210
'            .Left = 18
'            .Top = lbl.Top + lbl.Height + 3
'            .Caption = uniqueOps(i)
'            .Height = 25
'        End With
'
'        'Adjust the height of the label as the chracters wrap around
'        routineLabelHeight = routineLabelHeight + (10 * (Application.WorksheetFunction.Floor_Math(Len(routineLabelCap) / 30)))
'
'        'Create label for the routines to go inside the frame
'        Dim lbl2 As MSForms.Label
'        Set lbl2 = frm.Controls.Add("Forms.Label.1", "rtLbl" & i)
'        With lbl2
'            .Width = 200
'            .Left = 3
'            .Top = 5
'            .Height = routineLabelHeight
'            .Caption = routineLabelCap
'        End With
'                'Adjust the frame height to cover the size of our label
'        frm.Height = frm.Height + lbl2.Height
'
'
'    Next i
'
'
'
'        'Bring the button down underneath the frame
'    MapRoutinesForm.MapRoutinesBtn.Top = MapRoutinesForm.Controls("rtFrm" & i - 1).Top + MapRoutinesForm.Controls("rtFrm" & i - 1).Height + 5
'    MapRoutinesForm.Height = MapRoutinesForm.MapRoutinesBtn.Height + MapRoutinesForm.MapRoutinesBtn.Top + 40
'    MapRoutinesForm.Show
'
'    If MapRoutinesForm.Tag <> "True" Then Exit Function
'
'    'Create new routines() array with opName first, then the routines applicable to the opName() second
'    Erase routines
'    ReDim Preserve routines(1 To (uniqueOps.Count), 0 To 1)
'
'    For i = 1 To uniqueOps.Count
'        routines(i, 0) = uniqueOps(i)
'        Dim rtCaption As String
'        rtCaption = MapRoutinesForm.Controls("rtLbl" & i).Caption
'        rtCaption = Replace(rtCaption, " ", "")
'        If rtCaption = "" Then GoTo skipRts
'        routines(i, 1) = Split(rtCaption, ",")
'skipRts:
'    Next i
'
'    Unload MapRoutinesForm
'
'    'Set the characteristic and routine information so PartLib will know what to optimize
'
'
'    BuildOptimizeInspectionForm = True
'
'End Function




'*****************    Build Routine Form      *****************
'Called by RibbonCommands.DeleteRoutines
'Needs to take and array, A caption for the button, and optional Header with optional spacing ANd should return an array of selected checkboxes
Public Function BuildRoutineForm(routines() As Variant, colors() As Variant, frmHeader As String, btnCaption As String, Optional instructions As Variant, _
                                    Optional instructionsSpacing As Integer) As String()

    On Error GoTo frmErr
    Load DelRoutinesForm
    Dim myFrame As MSForms.Frame
    Dim chkbx As MSForms.checkBox
    Dim ctl As MSForms.control
    Dim btn As btnClass
    Dim spacing As Integer
    Dim returnArr() As String
    
    DelRoutinesForm.Caption = frmHeader
    
    For i = 0 To UBound(routines)
        'Spacing, account for how many rows each frame will  have
        spacing = spacing + (5 + Application.WorksheetFunction.Ceiling_Math((UBound(routines(i)) + 1) / 3) * 16)
    Next i
    
    Dim padding As Integer
    For i = 0 To UBound(colors)
        'Frames need to be spaced further from the top depending on the order they're in
        padding = padding + (10 * (i + 1))
    Next i
    
    spacing = spacing + padding
    
    'Exponential negative scaling, it just works
    spacing = spacing + ((i * i) * (-4))
    
    'Add the height of the btn
    spacing = spacing + 30
    
    'Additional spacing for the text label, if it is passed in
    spacing = spacing + instructionsSpacing
    
    'Add the difference of (Height  - Inside Height)
    DelRoutinesForm.Height = spacing + 37
    
    
    If Not IsMissing(instructions) Then
        Dim lblCtrl As MSForms.label
        Set lblCtrl = DelRoutinesForm.Controls.Add("Forms.Label.1", "instrLabel")
        With lblCtrl
            .Top = 1
            .Left = 11
            .Width = 366
            .Caption = instructions
            .Height = instructionsSpacing
        End With
    End If
    
    
    
    For i = 0 To UBound(routines)
        'For each group, create a frame to house the routines in
        Set myFrame = DelRoutinesForm.Controls.Add("Forms.Frame.1", "myframe" & (i + 1))
        With myFrame
            .BackColor = colors(i) 'Set the background color to the color we found associated with that routine name
            .Height = 5 + Application.WorksheetFunction.Ceiling_Math((UBound(routines(i)) + 1) / 3) * 16 'Scaling height depending on rows
            .Top = 10 * (i + 1) + instructionsSpacing
            If i > 0 Then
                For k = 1 To i
                    .Top = .Top + DelRoutinesForm.Controls("myframe" & k).Height
                Next k
            End If
            .Left = 11
            .Width = 366
            'For each frame, set the grouped routine names
            For j = 0 To UBound(routines(i))
                Set chkbx = myFrame.Controls.Add("Forms.CheckBox.1", "myBox" & (j + 1))
                With chkbx
                    .Height = 18
                    .Width = 120
                    .Left = 10 + (120 * Application.WorksheetFunction.Floor_Math(j Mod 3))
                    .Caption = routines(i)(j)
                    .Top = 1 + (14 * Application.WorksheetFunction.Floor_Math(j / 3))
                End With
            Next j
        End With
    Next i
    
    Set ctl = DelRoutinesForm.Controls.Add("Forms.CommandButton.1", "myBtn")
    'Set configuration for the btn
    With ctl
        .Height = 30
            'Set it underneath the last frame that we set
        .Top = DelRoutinesForm.Controls("myframe" & i).Top + DelRoutinesForm.Controls("myframe" & i).Height + 2
        .Width = 366
        .Left = 11
        .Caption = "Delete Routines"
        .Font.Bold = True
        .Font.Size = 12
    End With

    'Set as an instance of our custom btn class which has the callback function associated with it
    Set btn = New btnClass
    Set btn.btn = ctl
    Set btn.usrForm = DelRoutinesForm
    btn.btn.Caption = btnCaption
    
    DelRoutinesForm.Show
    
    On Error GoTo delErr
    Dim contr As MSForms.control
    For Each contr In DelRoutinesForm.Controls
        If TypeName(contr) = "CheckBox" Then
            If contr.Value = True Then
                'For each checked off box, add that routine to our list
                If (Not returnArr) = -1 Then
                    ReDim Preserve returnArr(0)
                    returnArr(0) = contr.Caption
                Else
                    ReDim Preserve returnArr(UBound(returnArr) + 1)
                    returnArr(UBound(returnArr)) = contr.Caption
                End If
            End If
        End If
    Next contr
    
    Unload DelRoutinesForm
    
    BuildRoutineForm = returnArr
    
    Exit Function
    
frmErr:
    MsgBox "Error when building form with listing of routines", vbCritical
    Exit Function
    
delErr:
    MsgBox "Couldn't Delete the routine: " & contr.Caption, vbCritical
    Exit Function


End Function

Public Sub Build_StationMappingForm(json_config As Object, json_content As Object)
    'Take the json_config that tells us how many cells and what values we should have in them and create the form from that
    'Should also set the json_config in the form, in case the user wants to be able to update the form's cells and machines
        
        
    Load StationMapping
    
    StationMapping.Unravel json_content:=json_content
    
    
    'List of Values for our ComboBoxes
    Dim cells() As Variant, resources() As Variant, CustomCheckBoxes As Collection
    Set CustomCheckBoxes = New Collection
    
    Dim re As RegExp: Set re = New RegExp
    re.Global = False: re.IgnoreCase = True
    re.Pattern = "rgb\((.*)\)"
    
    ReDim Preserve resources(json_config.Count - 1)
    ReDim Preserve cells(json_config.Count - 1)
    
    'Create a frame for each Cell and a checkbox / label for each Station
    Dim cell As Dictionary
    Dim i As Integer: Dim j As Integer
    For i = 1 To json_config.Count
        Set cell = json_config(i)
        cells(i - 1) = cell("name")
        'resources(i - 1, 1) = cell("stations")
        resources(i - 1) = Create_ResourceList(cell("stations"))
        
        Dim cell_frame As MSForms.Frame
        Set cell_frame = StationMapping.StationFrame.Controls.Add("Forms.Frame.1", cell("name"))
        With cell_frame
                'If its one of the first two frames, just give it an intial value
            If i <= 2 Then
                .Top = 5
            Else 'Otherwise need to offset from the bottom of the previous control
                Dim contr As MSForms.Frame
                Set contr = StationMapping.Controls(json_config(i - 2)("name"))
                .Top = 5 + contr.Top + contr.Height
            End If
            .Height = 27 * cell("stations").Count
            Dim bonusHeight As Integer
            bonusHeight = ((cell("stations").Count) ^ 1.82) * (-1)
            'bonusHeight = bonusHeight * (-1)
            .Height = .Height + bonusHeight
            
            .Font.Bold = False
            .Font.Size = 7
            .Width = 180
            .Left = 6 + (((i - 1) Mod 2) * 186)
            .Caption = cell("name")
            .BackColor = Parse_Color(cell("color"), re)
        End With
        
        'Add in the CheckBoxes and Labels for each Station in the Cell
        For j = 1 To cell("stations").Count
            Dim station As Dictionary: Set station = cell("stations")(j)
            Dim checkContr As MSForms.checkBox, checkBoxEvents As checkboxClass
            Set checkContr = cell_frame.Controls.Add("Forms.CheckBox.1")
            With checkContr
            'With cell_frame.Controls.Add("Forms.CheckBox.1")
                .Height = 10
                .Width = 10
                .Top = 6 + 18 * (j - 1)
                .Left = 6
                .Tag = station("resource")
                .name = "check_" & station("name")
            End With
            Set checkBoxEvents = New checkboxClass
            Set checkBoxEvents.cbEvents = checkContr
            Set checkBoxEvents.box = checkContr
            checkBoxEvents.station_name = station("name")
            CustomCheckBoxes.Add checkBoxEvents
            
            With cell_frame.Controls.Add("Forms.Label.1")
                .Top = 6 + 18 * (j - 1)
                .Left = 20
                .Width = 80
                .Height = 10
                .Caption = station("name")
                .name = "label_" & station("name")
                .Tag = station("name")
            End With
        Next j
        
    Next i
    
    'Set the Scroll Height of the Containing Frame
    Dim lastHeight As Integer
    For i = 0 To 1
        'Get whatever is lower of the last two Cell Frames that we added
        With StationMapping.StationFrame.Controls(json_config(json_config.Count - i)("name"))
            If i = 0 Then
                lastHeight = .Top + .Height
            Else
                lastHeight = Application.WorksheetFunction.Max(lastHeight, .Top + .Height)
            End If
        End With
    Next i
    StationMapping.StationFrame.ScrollHeight = lastHeight + 15
    
    
    'Add our Cells to the first ComboBox
    StationMapping.CellComboBox.list = cells
    StationMapping.Set_Data cells, resources, json_config
    
    StationMapping.Show vbModeless
    

End Sub

Private Function Create_ResourceList(stations As Collection) As Variant()
    'Create Array of the UNIQUE occuring Resource Names
    
    Dim output() As Variant: Dim item As Dictionary: Dim i As Integer
    ReDim Preserve output(0)
    output(0) = "ALL"
    
    For Each item In stations
        For i = 0 To UBound(output)
            If output(i) = item("resource") Then GoTo continue_coll
        Next i
        ReDim Preserve output(UBound(output) + 1)
        output(UBound(output)) = item("resource")
continue_coll:
    Next item

    Create_ResourceList = output

End Function

Private Function Parse_Color(color_string As String, re As RegExp) As Long
    'Get color value from a string "rgb(255,255,255)"

    Dim match As MatchCollection
    Set match = re.Execute(color_string)
    Dim vals() As String
    vals = Split(Replace(match(0).SubMatches(0), " ", ""), ",")
    Parse_Color = RGB(CInt(vals(0)), CInt(vals(1)), CInt(vals(2)))

End Function


Public Sub Temp_close_form()
    StationMapping.Hide

End Sub

Public Sub test_form()
    Load StationModify
    StationModify.Show vbModeless
End Sub

Public Sub test_like()
    Dim fso As FileSystemObject
    Set fso = New FileSystemObject
    Dim stream As TextStream
    Dim json As String
    
    json = fso.OpenTextFile(ThisWorkbook.path & "\content.json", ForReading).ReadAll()
    Dim json_config As Object
    Set json_config = JsonConverter.ParseJson(json)
    
    Set stream = fso.CreateTextFile(ThisWorkbook.path & "\config.json", True, True)
    stream.Write (JsonConverter.ConvertToJson(json_config))

End Sub






