VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ThisWorkbook"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
'*************************************************************
'*************************************************************
'*                  ThisWorkbook
'*
'*************************************************************
'*************************************************************


Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Call Validations.CloseDataValidations

'    On Error Resume Next
'    Workbooks("RoutineMapDataValidations.xlsm").Close SaveChanges:=False
End Sub

Private Sub Workbook_Open()
    Call Validations.OpenDataValidations
End Sub


Public Function GetFeaturesForImport()
    GetFeaturesForImport = Worksheets("PartLib Table").ExportRoutineMap()
End Function





Public Function IsInColl(col As Collection, val As Range) As Boolean
    For Each subitem In col
        If subitem = val Then
            IsInColl = True
        End If
    Next subitem
End Function

Public Function ColInColl(col As Collection, val As String) As Boolean
    For Each subitem In col
        If subitem = val Then
            ColInColl = True
        End If
    Next subitem
End Function

Public Sub SetBorders(target As Range)
    target.Borders(xlEdgeTop).Weight = xlThin
    target.Borders(xlEdgeBottom).Weight = xlThin
    target.Borders(xlEdgeLeft).Weight = xlThin
    target.Borders(xlEdgeRight).Weight = xlThin
End Sub

Public Function GetNumericSuffix(partNum As String) As String
    Dim i As Integer
    i = 0
    Dim endNum As String
    
    While IsNumeric(Mid(partNum, Len(partNum) - i, 1))
        i = i + 1
        endNum = Right(partNum, i)
        If Len(partNum) = i Then GoTo 10
    Wend
10
    GetNumericSuffix = endNum

End Function


'*****************    Build Routine Form      *****************
'Needs to take and array, A caption for the button, and optional Header with optional spacing ANd should return an array of selected checkboxes
Public Function BuildRoutineForm(routines() As Variant, colors() As Variant, frmHeader As String, btnCaption As String, Optional instructions As Variant, _
                                    Optional instructionsSpacing As Integer) As String()

    On Error GoTo frmErr
    Load DelRoutinesForm
    Dim myFrame As MSForms.Frame
    Dim chkbx As MSForms.CheckBox
    Dim ctl As MSForms.control
    Dim btn As btnClass
    Dim spacing As Integer
    Dim returnArr() As String
    
    DelRoutinesForm.Caption = frmHeader
    
    For i = 0 To UBound(routines)
        'Spacing, account for how many rows each frame will  have
        spacing = spacing + (5 + Application.WorksheetFunction.Ceiling_Math((UBound(routines(i)) + 1) / 3) * 16)
    Next i
    
    Dim padding As Integer
    For i = 0 To UBound(colors)
        'Frames need to be spaced further from the top depending on the order they're in
        padding = padding + (10 * (i + 1))
    Next i
    
    spacing = spacing + padding
    
    'Exponential negative scaling, it just works
    spacing = spacing + ((i * i) * (-4))
    
    'Add the height of the btn
    spacing = spacing + 30
    
    'Additional spacing for the text label, if it is passed in
    spacing = spacing + instructionsSpacing
    
    'Add the difference of (Height  - Inside Height)
    DelRoutinesForm.Height = spacing + 37
    
    
    If Not IsMissing(instructions) Then
        Dim lblCtrl As MSForms.label
        Set lblCtrl = DelRoutinesForm.Controls.Add("Forms.Label.1", "instrLabel")
        With lblCtrl
            .Top = 1
            .Left = 11
            .Width = 366
            .Caption = instructions
            .Height = instructionsSpacing
        End With
    End If
    
    
    
    For i = 0 To UBound(routines)
        'For each group, create a frame to house the routines in
        Set myFrame = DelRoutinesForm.Controls.Add("Forms.Frame.1", "myframe" & (i + 1))
        With myFrame
            .BackColor = colors(i) 'Set the background color to the color we found associated with that routine name
            .Height = 5 + Application.WorksheetFunction.Ceiling_Math((UBound(routines(i)) + 1) / 3) * 16 'Scaling height depending on rows
            .Top = 10 * (i + 1) + instructionsSpacing
            If i > 0 Then
                For k = 1 To i
                    .Top = .Top + DelRoutinesForm.Controls("myframe" & k).Height
                Next k
            End If
            .Left = 11
            .Width = 366
            'For each frame, set the grouped routine names
            For j = 0 To UBound(routines(i))
                Set chkbx = myFrame.Controls.Add("Forms.CheckBox.1", "myBox" & (j + 1))
                With chkbx
                    .Height = 18
                    .Width = 120
                    .Left = 10 + (120 * Application.WorksheetFunction.Floor_Math(j Mod 3))
                    .Caption = routines(i)(j)
                    .Top = 1 + (14 * Application.WorksheetFunction.Floor_Math(j / 3))
                End With
            Next j
        End With
    Next i
    
    Set ctl = DelRoutinesForm.Controls.Add("Forms.CommandButton.1", "myBtn")
    'Set configuration for the btn
    With ctl
        .Height = 30
            'Set it underneath the last frame that we set
        .Top = DelRoutinesForm.Controls("myframe" & i).Top + DelRoutinesForm.Controls("myframe" & i).Height + 2
        .Width = 366
        .Left = 11
        .Caption = "Delete Routines"
        .Font.Bold = True
        .Font.Size = 12
    End With

    'Set as an instance of our custom btn class which has the callback function associated with it
    Set btn = New btnClass
    Set btn.btn = ctl
    Set btn.usrForm = DelRoutinesForm
    btn.btn.Caption = btnCaption
    
    DelRoutinesForm.Show
    
    On Error GoTo delErr
    Dim contr As MSForms.control
    For Each contr In DelRoutinesForm.Controls
        If TypeName(contr) = "CheckBox" Then
            If contr.Value = True Then
                'For each checked off box, add that routine to our list
                If (Not returnArr) = -1 Then
                    ReDim Preserve returnArr(0)
                    returnArr(0) = contr.Caption
                Else
                    ReDim Preserve returnArr(UBound(returnArr) + 1)
                    returnArr(UBound(returnArr)) = contr.Caption
                End If
            End If
        End If
    Next contr
    
    Unload DelRoutinesForm
    
    BuildRoutineForm = returnArr
    
    Exit Function
    
frmErr:
    MsgBox "Error when building form with listing of routines", vbCritical
    Exit Function
    
delErr:
    MsgBox "Couldn't Delete the routine: " & contr.Caption, vbCritical
    Exit Function


End Function











'
'Sub events()
'    Application.EnableEvents = True
'End Sub

'Called by PartLib and PivotFeature








