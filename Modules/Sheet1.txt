VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Sheet1"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Option Explicit


'************************************************************
'***************   Exposed Routines   ***********************
'************************************************************


Public Sub ApplyGroupings()
    On Error Resume Next
    Outline.ShowLevels RowLevels:=2
    Rows("1:400").Ungroup
    On Error GoTo 0
    
    Dim instanceGroup As Boolean
    Dim groupStart As Integer
    Dim cell As Range
    Dim rangeEnd As Integer
    rangeEnd = Range("C9").End(xlDown).Row
    
    'Begin keeping track of cells once we hit a certain color, when we switch color, group the rows that we tracked
    For Each cell In Range("C9:C" & rangeEnd)
        If (cell.Font.Color = RGB(128, 128, 128) And instanceGroup = False) Then
            instanceGroup = True
            groupStart = cell.Row
            If (cell.Row = rangeEnd) Then
                Rows(cell.Row).Group
            End If
        
        ElseIf (cell.Font.Color <> RGB(128, 128, 128) And instanceGroup = True) Then
            instanceGroup = False
            Rows(groupStart & ":" & cell.Row - 1).Group
            groupStart = 0
        ElseIf (instanceGroup = True And cell.Row = rangeEnd) Then
            Rows(groupStart & ":" & cell.Row - 1).Group
        Else
            'Next iteration
        End If
    Next cell
    
    Outline.ShowLevels RowLevels:=1

End Sub

Public Sub IgnoreErrors()
    'Characteristic values are inconsistently formatted, suppress the meaningless errors
    Dim workingRange As Range
    Set workingRange = Range("L9:L" & Range("L9").End(xlDown).Row)
    Dim charCell As Range
    
    For Each charCell In workingRange
        charCell.Errors.Item(xlInconsistentFormula).Ignore = True
        charCell.Errors.Item(xlUnlockedFormulaCells).Ignore = True
    Next charCell
End Sub






'************************************************************
'****************   Event Callbacks   ***********************
'************************************************************


'-----------------------------------------------------------------------------------------------------------------------------------------

'******************   Double Click   ************************


Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    If Target.Areas.Count = 1 Then
        If Target.column = 22 And Target.Row > 3 Then
            SetAttachment Target:=Target
        ElseIf Target.column = 3 And Target.Font.Color = RGB(0, 176, 240) Then
            ExpandGroup Target:=Target
        End If
    End If
End Sub

Private Sub SetAttachment(Target As Range)
    Dim fso As FileSystemObject
    Dim path As String
    Set fso = New FileSystemObject
    path = Replace(ThisWorkbook.path, fso.GetFileName(ThisWorkbook.path), "Attachments")
10
    If Not (fso.FolderExists(path)) Then
        Dim result As Integer
        result = MsgBox("There doesn't seem to be an 'Attachments' directory for this project" & vbCrLf & "Would you like to create one?", vbYesNo)
        If result = vbYes Then
            fso.CreateFolder (path)
            GoTo 10
        Else
            Exit Sub
        End If
    End If
    
    'After we check to see if the "Attachments" folder exists
    Target.Value = ""
    
    With Application.FileDialog(msoFileDialogFilePicker)
        .InitialFileName = path
        .Title = "Select Feature Attachment(s)"
        .Show
        Dim i As Integer
        For i = 1 To .SelectedItems.Count
            Dim arr() As String
            arr = Split(.SelectedItems.Item(i), "\")
            Target.Value = Target.Value & arr(UBound(arr))
            'If there's more than one file, then we need to delimit it by a character that can't appear in the file name
            If i <> .SelectedItems.Count Then
                Target.Value = Target.Value & "|"
            End If
        Next i
    End With
    Target.offset(1, 0).Select

End Sub

Private Sub ExpandGroup(Target As Range)
    'Show/Hide children of multiple instance features when user double-clicks
    Dim child As Range
    Set child = Target.offset(1, 0)
    Rows(child.Row).ShowDetail = Rows(child.Row).EntireRow.Hidden
    child.Activate
    
End Sub


'******************   On Change   ************************


Private Sub Worksheet_Change(ByVal Target As Range)
    If Target.Areas.Count = 1 Then
        Dim subCell As Range
        'change to Inspection Type (this should only trigger if the user changed the value manually)
        If Target.column = 7 Then
            Application.EnableEvents = False 'prevent recursive looping
            For Each subCell In Target
                If subCell.Value = "" Then
                    subCell.Font.Color = RGB(0, 0, 0) 'revert back to black
                Else
                    subCell.Font.Color = RGB(112, 48, 160) 'set purple to designate custom value
                End If
            
            Next subCell
        End If
        'change to Inspection Method
        If Target.column = 14 Then
            On Error GoTo 10
            Application.EnableEvents = False 'prevent recursive looping
            
            For Each subCell In Target
                If subCell.Value = "" Then
                    subCell.offset(0, -7).Value = ""
                    subCell.offset(0, 2).Value = ""
                Else
                    Dim inspType As String
                    inspType = AssignInspType(subCell.Value) 'is Attribute/Variable?
                    subCell.offset(0, -7).Value = inspType 'set Attribute/Variable
                    
                    SetGaugePinData methodCell:=subCell
                    
                    
'                    If subCell.Value = "Gauge Pins · Go/NoGo" Then
'                        SetGaugePinData methodCell:=subCell
'                    End If 'TODO: else if on the Functional Gauge
                End If
                subCell.offset(0, -7).Font.Color = RGB(0, 0, 0)
            Next subCell
        End If
    End If
10
    Application.EnableEvents = True
End Sub

Private Function AssignInspType(Method As String) As String
    Dim valWb As Workbook
    Dim valSheet As Worksheet
    On Error GoTo 10
    Set valWb = Workbooks("RoutineMapDataValidations.xlsm")
    Set valSheet = valWb.Worksheets("Data Validations")
    
    Dim workingRange As Range
    Set workingRange = valSheet.Range("$E$2:$F$" & valSheet.Range("F2").End(xlDown).Row)
    Dim inspType As Variant
    inspType = Application.WorksheetFunction.VLookup(Method, workingRange, 2, False)
    AssignInspType = inspType
    
10
End Function

Private Sub SetGaugePinData(methodCell As Range)
    'TODO what to do in the case of a MIN/MAX
    If methodCell.Value = "Gauge Pins · Go/NoGo" Then
        Dim ballNum As String
        Dim iexWS As Worksheet
        ballNum = Split(methodCell.offset(0, -3).Value, "_")(0)
        Set iexWS = Worksheets("IEX-Data")
        
        Dim units As String
        units = Application.WorksheetFunction.VLookup(ballNum, iexWS.Range("A2:G" & iexWS.Range("G2").End(xlDown).Row), 7, False)
        MsgBox (units)
        
        Dim trunc As Double
        Dim nom As Double
        Dim conv As Double
        Dim tol As Double
        Dim setPins As Boolean
        
        'What are the dimension units
        Select Case units
        Case "deg"
            methodCell.offset(0, 2).Value = "NA"
            Exit Sub
        Case "mm" 'only use Inch pins, so we need to convert
            conv = 25.4
        Case "in"
            conv = 1
        Case Else
            MsgBox ("Not a recognized unit type")
            Exit Sub
        End Select
        
        'What is the tolerance range
        tol = CDbl(methodCell.offset(0, 4).Value) / conv
        nom = CDbl(methodCell.offset(0, -9).Value) / conv
        
        Select Case tol
        Case Is >= 0.002 'Needs 50% Truncation
            trunc = 0.25
            setPins = True
        Case Is > 0.001 'Needs 25% Truncation
            trunc = 0.125
            setPins = True
        Case Else 'No Truncation
            setPins = False
        End Select
        
        Dim setString As String
        Dim fullString As String
        
        If setPins = True Then
            setString = "(" & Format(nom - (tol * trunc), ".0000") & " " & Format(nom + (tol * trunc), ".0000")
            setString = setString & " SET)"
        End If
        
        fullString = "(" & Format(nom - (tol * 0.5), ".0000") & " " & Format(nom + (tol * 0.5), ".0000")
        fullString = fullString & " FULL)"
        
        methodCell.offset(0, 2).Value = setString & " " & fullString
        
    End If 'TODO: also catch the "Functional Gauge" in the Else IF

End Sub

Sub events()
    Application.EnableEvents = True
End Sub









'Only using this to set that data validations once, can delete this after
Private Sub TempSetValidtion()
    Dim sample As Range
    Set sample = Range("N9:N400")
    Dim workingCell As Range
    For Each workingCell In sample
        With workingCell.Validation
            .Delete
            Dim tempstring As String
            tempstring = "=INDIRECT(" & Chr(34) & "[RoutineMapDataValidations.xlsm]InspMethods!C" & workingCell.Row - 7 & "#" & Chr(34) & ")"
            .Add Type:=xlValidateList, Formula1:=tempstring
            .ShowError = False
        End With
    Next workingCell

End Sub





