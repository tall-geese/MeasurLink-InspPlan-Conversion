VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Sheet1"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Option Explicit


'************************************************************
'***************   Exposed Routines   ***********************
'************************************************************


Public Sub ApplyGroupings()
    On Error Resume Next
    Outline.ShowLevels RowLevels:=2
    Rows("1:400").Ungroup
    On Error GoTo 0
    
    Dim instanceGroup As Boolean
    Dim groupStart As Integer
    Dim cell As Range
    Dim rangeEnd As Integer
    rangeEnd = Range("C9").End(xlDown).Row
    
    'Begin keeping track of cells once we hit a certain color, when we switch color, group the rows that we tracked
    For Each cell In Range("C9:C" & rangeEnd)
        If (cell.Font.Color = RGB(128, 128, 128) And instanceGroup = False) Then
            instanceGroup = True
            groupStart = cell.Row
            If (cell.Row = rangeEnd) Then
                Rows(cell.Row).Group
            End If
        
        ElseIf (cell.Font.Color <> RGB(128, 128, 128) And instanceGroup = True) Then
            instanceGroup = False
            Rows(groupStart & ":" & cell.Row - 1).Group
            groupStart = 0
        ElseIf (instanceGroup = True And cell.Row = rangeEnd) Then
            Rows(groupStart & ":" & cell.Row - 1).Group
        Else
            'Next iteration
        End If
    Next cell
    
    Outline.ShowLevels RowLevels:=1

End Sub

Public Sub IgnoreErrors()
    'Characteristic values are inconsistently formatted, suppress the meaningless errors
    Dim workingRange As Range
    Set workingRange = Range("L9:L" & Range("L9").End(xlDown).Row)
    Dim charCell As Range
    
    For Each charCell In workingRange
        charCell.Errors.Item(xlInconsistentFormula).Ignore = True
        charCell.Errors.Item(xlUnlockedFormulaCells).Ignore = True
    Next charCell
End Sub




'-----------------------------------------------------------------------------------------------------------------------------------------

'************************************************************
'****************   Event Callbacks   ***********************
'************************************************************



Private Sub Worksheet_BeforeDoubleClick(ByVal target As Range, Cancel As Boolean)
    If target.Areas.Count = 1 Then
        If target.column = 22 And target.Row > 3 Then
            SetAttachment target:=target
        ElseIf target.column = 3 And target.Font.Color = RGB(0, 176, 240) Then
            ExpandGroup target:=target
        End If
    End If
End Sub

Private Sub SetAttachment(target As Range)
    Dim fso As FileSystemObject
    Dim path As String
    Set fso = New FileSystemObject
    path = Replace(ThisWorkbook.path, fso.GetFileName(ThisWorkbook.path), "Attachments")
10
    If Not (fso.FolderExists(path)) Then
        Dim result As Integer
        result = MsgBox("There doesn't seem to be an 'Attachments' directory for this project" & vbCrLf & "Would you like to create one?", vbYesNo)
        If result = vbYes Then
            fso.CreateFolder (path)
            GoTo 10
        Else
            Exit Sub
        End If
    End If
    
    'After we check to see if the "Attachments" folder exists
    target.Value = ""
    
    With Application.FileDialog(msoFileDialogFilePicker)
        .InitialFileName = path
        .Title = "Select Feature Attachment(s)"
        .Show
        Dim i As Integer
        For i = 1 To .SelectedItems.Count
            Dim arr() As String
            arr = Split(.SelectedItems.Item(i), "\")
            target.Value = target.Value & arr(UBound(arr))
            'If there's more than one file, then we need to delimit it by a character that can't appear in the file name
            If i <> .SelectedItems.Count Then
                target.Value = target.Value & "|"
            End If
        Next i
    End With
    target.offset(1, 0).Select

End Sub

Private Sub ExpandGroup(target As Range)
    'Show/Hide children of multiple instance features when user double-clicks
    Dim child As Range
    Set child = target.offset(1, 0)
    Rows(child.Row).ShowDetail = Rows(child.Row).EntireRow.Hidden
    child.Activate
    
End Sub






